using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HackerRankProblems.Array.Stack
{
    internal class BalancedBrackets
    {
        //public static void Main(string[] args)
        //{
        //    Console.WriteLine(isBalanced("[([{{}}]{[[][][([[]]){[]}{}]]}[]{{}}{})[[]]]{{}}(()[[[[[(){}[]]({}{[]})[][[][]]]]{}]{[{}]{[{[][](()({{()}}){([]({({{[]}([([()]{()[[([({{{[]{(){}}[][]({{[([])()](())([{[]([()]{})}]){}([]){()}{}[]([[()]])}()})[{}]}()}(())}){{}()}[]]{{}})]][[]({{[{}]}})({{}({{[]{()}([][{[()]}]{})}()})}{{}}{})]()(){}}(()({()}[([](){[]()}[])])[])[])][{[{[]}]{}([])}]()(()))}){([{}])}[(([]){[]{}})]{}({}{})}){}({{}([][](){{[][{()([[{}()]]{()}{{}{[()]}})[()[]{}](){[{}()[]][{{}}{[{}][]()}[]](())[[][]][]()}}[({}([[{([]){}}]()([()(){}]){([()]())}](()))(()))]]{}()[][{[{}(([]){([()]{()()}([{}][[[]{[[(({([([]){()[]}]){(())}[]}))][((([]{})[{}[[()]({({[()[]]{}(()[{}[][[{}][][]({()}[{([])}][])]][]{})([])}){}{((){})}}){[]}[]()(()(()))(()[{{}}]){}({{{((()([](()[][]{}){({})}{(([{({{}})}]))})))}}})]]))]]}]]))})]}]}})}))})}]}}])"));
        //    Console.WriteLine(isBalanced("]({}{()}[}}[]{]([]{}({({(][})}{)[[(})][)})(){(}{){]][(}(][{[])(]]([[{{(]]{}([}]]){[[({]}[(}][(]){[]}])}{]])][([][([)]{[}()])}[{][]{{(]{[][){[)([}]}[{}(({{({)}()}}{{{{}[}]}){})[((}[[}[[}("));
        //    Console.WriteLine(isBalanced("}[(]}[][)({]([][)}[)[]))({(]}{}][)[]()})})}{{{{{}{])(}[}][{({][))}[{]]]])[[){(()}}})){[]](([{]([}}])((}{}}(]}])])]{[]}{){[{{]([]})[}})]()({[([}(]{}){)))[({(]{})(({{}({{[{[{))()]{(([)])[{]}]))(]{}}[}[{()))())[{}]]])][])}{]][)]]])[}{]}{}[[{[]]({(()))(](}}}][}}}{]}(}){}}}{({}[{(]}[[[]({}{}}}}}{))[}))][}((([}[)}[({}[]}[[]}[]([]{(]{]}])]]){[(]}{)()((}){][{]}[{){}{){}{[])}}(}((}]([({}](]}}[{}{]}({)]{[]]}((](}{[[]{))[]{{{{])[{(}{({]}}}})[]}{)][){]}({]]]}{{{}[](}}({{{])][[{}[]]}[[}{}{[[(])([{()){(){]](}}}((]]{]]{([]({)(}](]}}{))]{](){([}}})}{[{([[]])(}{(]{)][))))]}[{({(}({]{[)}][]}]{)()(])((}{)]()({)}({}[]{(](){}({[}{){](})]]([([[[{}[()]{{{(]()}{)(})[[{{}(])(][((]]){(]}"));
        //    Console.WriteLine(isBalanced("]{}}}[()))]}]{{[[)}((]}{{}[{[(([)}[){[][){}[)[[[}(({[)(([(((({{([[[])}{](]([]{(}[][])[){}[}{([[(([{(]])}([}(){(){))}[{]}()(]}([{](){[)])}(((}}(((})({)(][(])(([{]])[(){]])}(}}}[{{(({)[[}}[{[}[}{){([]}{]{}])[])[((()}({]])(}}[{}{]]({)](}[({[(})}({[}]()([(]])]((}}}]])(][({}(({[))[{{]](]{)){{[{[()[(][(]}{){[[[](}[]]}{[)([]{({[})}[][})[)([))((}))]([{[[{]}]]{(]([[}]()[[[}[[([)))]})]}){([({{)}])[])(]]})){{]](()}))}}{(]]{}]})]{({(}()}}){](}{{{{[[()((()[](([])[]{){}[}{}}()(][}]{]]()(((]({[}(){]{}([{(}){}(}((}{(}{){{)[][["));
        //    Console.WriteLine(isBalanced("[]((()[[]{}[)]}]]}[{[}{()[())]{}{}]))[(){}})){{]}({{[)]){]([])({]}[{])]](}{]}]{]{{{[)}())}({()([(})(}{}[{[[(({((]{[)())}}{(][])[(]{}{])([}{](([]{{[]())(([}]]}}{}){{(]){])]]}{()}[{)({){{]([{}{{}{}]([[)](}]]([{)}{}[[{({]{{]]({(]})([}(((]{(}}}}[})})()(){{])[[[()](}(()[[{){[{[{]})(]([]}))}[]{))(}(()){]()()}{([(}()](]())(}(]]][(}{{(}(}])])[}}})){{[]{}()][(){[])))]([[({}{][)]][([{(]]][]){}(]}{({](]}[[])([](}[)]]{[{}(}{]}[({[{[)]}}((({}])))[((]{{)](()){(}[]]()]{({}(}}))[){)[{{]]}}][({(]]{{]}[(}[](){(((){](){(][(((}][}[)[[))}[])]][[}]{){[[)[()}(([]{)(}()](}{]([[}{[({()]{)){}))[{[[[[{]}[})()})(]]{}{]]([[)}](([}}[]])){}}{{{]][)]{])(([}}[[)[}}]({(()[(}()}[}[{][[]](({(([[]())(()[{[[{{]){)(}()()]((}({){][{(}]][}[({[)((({{)]([}{[}()))()([[{{[){][)}]}}[[[(){]]{((]]])](({)}[}}]](](([))}([)[)[)][{[{){){)})[))]](}[][)((][{((][[[[{()[([)()})[)]}][](]}[[([((}][(}({}}[}([){{({()[{{[[]}}})}{{{]]{}{{{{}]{[{){})]}[[}"));
        //    Console.WriteLine(isBalanced("{{}}{}([[]]){}[[]{}[([{()}]()[]({}))[{}({})]{[]({}[{({}(){[[{[]}](({(){{}}[{}{}(){([{{}}()])[]({()})}]}[]{{[{}]}[[]]}))]}[])}{}]){}({})[[{}]]}]{{}({[]()})[(){{[]}{}}{}]}()][(){[]}[{}][]]{}{[]{[()[]]}}()[]"));
        //}
        public static string isBalanced(string s)
        {
            var s1 = new Stack<char>();

            char[] characters = s.ToCharArray();
            for (int i = 0; i < characters.Length; i++)
            {
                if (characters[i] == '(' || characters[i] == '{' || characters[i] == '[')
                {
                    s1.Push(characters[i]);
                }
                else
                {
                    if (s1.Count() != 0 && s1.Pop() != getOpeningBracket(characters[i]))
                    {
                        return "NO";
                    }
                }
            }
            return s1.Count() == 0 ? "YES" : "NO";
        }
        public static char getOpeningBracket(char closingBracket)
        {
            return closingBracket switch
            {
                ')' => '(',
                '}' => '{',
                ']' => '[',
            };
        }
    }
}
